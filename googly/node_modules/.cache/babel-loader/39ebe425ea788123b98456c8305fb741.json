{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wendy/Desktop/School/CMPUT-401/Googly-Word-Game/googly/src/Animation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nimport { controlOptions, wordsState, scoreState } from './atom';\nimport { SPEED_STEP, SPAWN_INTERVAL } from './constants';\nimport { createWord, removeWord } from './utils';\nimport { Word } from \"./Word\";\nimport { Control } from \"./Control\"; // const WORDS = ['test', 'test1', 'test2'];\n\nexport const Animation = () => {\n  _s();\n\n  /*#__PURE__*/\n  _jsxDEV(\"h1\", {\n    children: \"Animation is working.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n\n  const wordsArr = [{\n    text: \"test\",\n    x: 100,\n    y: 100\n  }, {\n    text: \"hello\",\n    x: 200,\n    y: 300\n  }];\n  const [words, updateWords] = useRecoilState(wordsState);\n  const [controlState, setControlState] = useRecoilState(controlOptions); // const [score, setScore] = useRecoilState(scoreState);\n\n  const requestRef = useRef();\n  const intervalRef = useRef();\n  const fieldRef = useRef();\n  const advanceStep = useCallback(() => {\n    updateWords(oldWords => {\n      const newWords = [];\n\n      for (let word of oldWords) {\n        const newY = word.y + SPEED_STEP * controlState.speed / 60;\n\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\n          newWords.push({ ...word,\n            y: newY\n          });\n        }\n      }\n\n      return newWords;\n    });\n    requestRef.current = requestAnimationFrame(advanceStep);\n  }, [controlState.speed, updateWords]);\n  const spawnWord = useCallback(() => {\n    updateWords(oldWords => [...oldWords, createWord()]);\n  }, [updateWords]);\n  useEffect(() => {\n    const stop = () => {\n      intervalRef.current && clearInterval(intervalRef.current);\n      requestRef.current && cancelAnimationFrame(requestRef.current);\n    };\n\n    if (controlState.isRunning) {\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\n      requestRef.current = requestAnimationFrame(advanceStep);\n    } else {\n      stop();\n    }\n\n    return () => stop();\n  }, [controlState.isRunning, advanceStep, spawnWord]);\n  const clear = useCallback(() => {\n    setControlState({ ...controlState,\n      isRunning: false,\n      speed: 5\n    });\n    updateWords([]); // setScore(0);\n  }, [setControlState, updateWords, controlState]); // }, [setControlState, setScore, updateDots, controlState]);\n\n  const onWordClick = index => {\n    console.log(\"clicked-------\"); // setScore(score + calculatePoints(dots[index]));\n\n    updateWords(removeWord(words, index));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      children: /*#__PURE__*/_jsxDEV(Control, {\n        onClear: clear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      ref: fieldRef,\n      children: words.map((word, index) => {\n        const x = (fieldRef.current.offsetWidth - word.size) * word.x / 100;\n        return /*#__PURE__*/_jsxDEV(Word, { ...word,\n          x: x,\n          index: index,\n          click: onWordClick\n        }, `word-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this) // wordsArr.map((word, => (\n  //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\n  // ))\n  // {/* <Word\n  //     // word=\"TEST\"\n  //     color=\"red\" \n  //     x=\"100\" y=\"200\" \n  //     // onClick={() => {}} \n  //     size=\"40\" \n  // />\n  // <Word\n  //     // word=\"test2\"\n  //     color=\"green\" \n  //     x=\"200\" y=\"300\" \n  //     // onClick={() => {}} \n  //     size=\"35\" /> */}\n  // {/* </div> */}\n  // </div>\n  ;\n};\n\n_s(Animation, \"zMmnENKuprl+kgR1YyHeE/cfyOc=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = Animation;\nexport default Animation; // const =[{text1: xxx}, {...}...]\n// \n\nvar _c;\n\n$RefreshReg$(_c, \"Animation\");","map":{"version":3,"sources":["/Users/wendy/Desktop/School/CMPUT-401/Googly-Word-Game/googly/src/Animation.js"],"names":["React","useState","useCallback","useEffect","useRef","atom","useRecoilState","controlOptions","wordsState","scoreState","SPEED_STEP","SPAWN_INTERVAL","createWord","removeWord","Word","Control","Animation","wordsArr","text","x","y","words","updateWords","controlState","setControlState","requestRef","intervalRef","fieldRef","advanceStep","oldWords","newWords","word","newY","speed","current","offsetHeight","size","push","requestAnimationFrame","spawnWord","stop","clearInterval","cancelAnimationFrame","isRunning","setInterval","clear","onWordClick","index","console","log","map","offsetWidth"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\n\nimport { controlOptions, wordsState, scoreState } from './atom';\nimport { SPEED_STEP, SPAWN_INTERVAL } from './constants';\nimport { createWord, removeWord } from './utils';\n\nimport { Word } from \"./Word\";\nimport { Control } from \"./Control\";\n\n// const WORDS = ['test', 'test1', 'test2'];\n\nexport const Animation = () => {\n    <h1>Animation is working.</h1>\n    const wordsArr = [{ text: \"test\", x: 100, y:     100 }, { text: \"hello\", x: 200, y: 300 }];\n    const [words, updateWords] = useRecoilState(wordsState);\n    const [controlState, setControlState] = useRecoilState(controlOptions);\n    // const [score, setScore] = useRecoilState(scoreState);\n\n    const requestRef = useRef();\n    const intervalRef = useRef();\n    const fieldRef = useRef();\n\n    const advanceStep = useCallback(() => {\n        updateWords((oldWords) => {\n            const newWords = [];\n            for (let word of oldWords) {\n                const newY = word.y + SPEED_STEP * controlState.speed / 60;\n                if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\n                    newWords.push(\n                        {\n                            ...word,\n                            y: newY,\n                        }\n                    );\n                }\n            }\n            return newWords;\n        });\n        requestRef.current = requestAnimationFrame(advanceStep);\n    }, [controlState.speed, updateWords]);\n\n\n    const spawnWord = useCallback(() => {updateWords((oldWords) => [...oldWords, createWord()]);\n    }, [updateWords]);\n\n    useEffect(() => {\n        const stop = () => {\n            intervalRef.current && clearInterval(intervalRef.current);\n            requestRef.current && cancelAnimationFrame(requestRef.current);\n        }\n\n        if (controlState.isRunning) {\n            intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\n            requestRef.current = requestAnimationFrame(advanceStep);\n        } else {\n            stop();\n        }\n        return () => stop();\n    }, [controlState.isRunning, advanceStep, spawnWord])\n\n\n    const clear = useCallback(() => {\n        setControlState({...controlState, isRunning: false, speed: 5});\n        updateWords([]);\n        // setScore(0);\n    }, [setControlState, updateWords, controlState]);\n    // }, [setControlState, setScore, updateDots, controlState]);\n\n\n    const onWordClick = (index) => {\n        console.log(\"clicked-------\")\n        // setScore(score + calculatePoints(dots[index]));\n        updateWords(removeWord(words, index));\n    };\n\n    return (\n        <div className=\"main\">\n            <div className=\"panel\">\n                <Control onClear={clear} />\n                {/*<Score />*/}\n            </div>\n            <div className=\"field\" ref={fieldRef}>\n                {words.map((word, index) => {\n                    const x = (fieldRef.current.offsetWidth - word.size) * word.x / 100\n                    return <Word\n                        key={`word-${index}`} \n                        {...word}\n                        x={x}\n                        index={index} \n                        click={onWordClick} \n                    />;\n                })}\n            </div>\n        </div>\n                    // wordsArr.map((word, => (\n                    //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\n                    // ))\n\n                \n                // {/* <Word\n                //     // word=\"TEST\"\n                //     color=\"red\" \n                //     x=\"100\" y=\"200\" \n                //     // onClick={() => {}} \n                //     size=\"40\" \n                // />\n                // <Word\n                //     // word=\"test2\"\n                //     color=\"green\" \n                //     x=\"200\" y=\"300\" \n                //     // onClick={() => {}} \n                //     size=\"35\" /> */}\n            // {/* </div> */}\n        // </div>\n\n    );\n}\n\n\n\n\nexport default Animation;\n// const =[{text1: xxx}, {...}...]\n// "]},"metadata":{},"sourceType":"module"}