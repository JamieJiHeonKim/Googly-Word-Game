{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wendy/Desktop/School/CMPUT-401/Googly-Word-Game/googly/src/Animation.js\",\n    _s = $RefreshSig$();\n\nimport { Button, DangerButton } from \"./Style\";\nimport React, { useState } from \"react\";\nimport { atom } from \"recoil\";\nimport { Word } from \"./Word\";\nimport { MAX_POINTS, COLORS, SIZES } from './constants'; // const WORDS = ['test', 'test1', 'test2'];\n\nconst WORD1 = [\"test1\"];\nconst WORD2 = [\"test2\"];\nexport const Animation = () => {\n  _s();\n\n  /*#__PURE__*/\n  _jsxDEV(\"h1\", {\n    children: \"Animation is working.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n\n  const wordsArr = [{\n    text: \"test\",\n    x: 100,\n    y: 100\n  }, {\n    text: \"hello\",\n    x: 200,\n    y: 300\n  }];\n  const spawnDot = useCallback(() => {\n    updateWords(oldWords => [...oldWords, createWord()]);\n  }, [updateWords]);\n\n  const onWordClick = index => {\n    // setScore(score + calculatePoints(dots[index]));\n    updateWords(removeWord(words, index));\n  };\n\n  const [words, updateWords] = useRecoilState(wordsState);\n  const fieldRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      ref: fieldRef,\n      children: wordsArr.map(word => /*#__PURE__*/_jsxDEV(Word, {\n        text: word.text,\n        x: word.x,\n        y: word.y,\n        size: \"40\"\n      }, word.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Animation, \"pQa0nhNxm95Xqcu97ioBmb3XwGM=\", true);\n\n_c = Animation;\nexport default Animation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Animation\");","map":{"version":3,"sources":["/Users/wendy/Desktop/School/CMPUT-401/Googly-Word-Game/googly/src/Animation.js"],"names":["Button","DangerButton","React","useState","atom","Word","MAX_POINTS","COLORS","SIZES","WORD1","WORD2","Animation","wordsArr","text","x","y","spawnDot","useCallback","updateWords","oldWords","createWord","onWordClick","index","removeWord","words","useRecoilState","wordsState","fieldRef","useRef","map","word"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,YAAjB,QAAqC,SAArC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,KAA7B,QAA0C,aAA1C,C,CAEA;;AACA,MAAMC,KAAK,GAAG,CAAC,OAAD,CAAd;AACA,MAAMC,KAAK,GAAG,CAAC,OAAD,CAAd;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAMC,QAAQ,GAAG,CAAC;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,CAAC,EAAE,GAAnB;AAAwBC,IAAAA,CAAC,EAAE;AAA3B,GAAD,EAAmC;AAAEF,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,CAAC,EAAE,GAApB;AAAyBC,IAAAA,CAAC,EAAE;AAA5B,GAAnC,CAAjB;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BC,IAAAA,WAAW,CAAEC,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcC,UAAU,EAAxB,CAAf,CAAX;AACH,GAF2B,EAEzB,CAACF,WAAD,CAFyB,CAA5B;;AAGA,QAAMG,WAAW,GAAIC,KAAD,IAAW;AAC3B;AACAJ,IAAAA,WAAW,CAACK,UAAU,CAACC,KAAD,EAAQF,KAAR,CAAX,CAAX;AACH,GAHD;;AAIA,QAAM,CAACE,KAAD,EAAQN,WAAR,IAAuBO,cAAc,CAACC,UAAD,CAA3C;AACA,QAAMC,QAAQ,GAAGC,MAAM,EAAvB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,GAAG,EAAED,QAA5B;AAAA,gBAEQf,QAAQ,CAACiB,GAAT,CAAaC,IAAI,iBACb,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAI,CAACjB,IAAjB;AAAuC,QAAA,CAAC,EAAEiB,IAAI,CAAChB,CAA/C;AAAkD,QAAA,CAAC,EAAEgB,IAAI,CAACf,CAA1D;AAA6D,QAAA,IAAI,EAAC;AAAlE,SAA4Be,IAAI,CAACjB,IAAjC;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH,CA3CM;;GAAMF,S;;KAAAA,S;AAgDb,eAAeA,SAAf","sourcesContent":["import { Button, DangerButton } from \"./Style\";\nimport React, { useState } from \"react\";\nimport { atom } from \"recoil\";\nimport { Word } from \"./Word\";\nimport { MAX_POINTS, COLORS, SIZES } from './constants'; \n\n// const WORDS = ['test', 'test1', 'test2'];\nconst WORD1 = [\"test1\"];\nconst WORD2 = [\"test2\"];\n\nexport const Animation = () => {\n    <h1>Animation is working.</h1>\n\n    const wordsArr = [{ text: \"test\", x: 100, y: 100 }, { text: \"hello\", x: 200, y: 300 }]\n    const spawnDot = useCallback(() => {\n        updateWords((oldWords) => [...oldWords, createWord()]);\n    }, [updateWords]);\n    const onWordClick = (index) => {\n        // setScore(score + calculatePoints(dots[index]));\n        updateWords(removeWord(words, index));\n    };\n    const [words, updateWords] = useRecoilState(wordsState);\n    const fieldRef = useRef();\n\n    return (\n        <div className=\"main\">\n            <div className=\"panel\">\n                {/*<Control onClear={clear} />*/}\n                {/*<Score />*/}\n            </div>\n            <div className=\"field\" ref={fieldRef}>\n                {\n                    wordsArr.map(word => (\n                        <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\n                    ))\n                }\n                {/* <Word\n                    // word=\"TEST\"\n                    color=\"red\" \n                    x=\"100\" y=\"200\" \n                    // onClick={() => {}} \n                    size=\"40\" \n                />\n                <Word\n                    // word=\"test2\"\n                    color=\"green\" \n                    x=\"200\" y=\"300\" \n                    // onClick={() => {}} \n                    size=\"35\" /> */}\n            </div>\n        </div>\n\n    );\n};\n\n\n\n\nexport default Animation;"]},"metadata":{},"sourceType":"module"}