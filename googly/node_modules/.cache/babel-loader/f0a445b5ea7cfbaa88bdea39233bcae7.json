{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\GitHub\\\\Googly-Word-Game\\\\googly\\\\src\\\\Animation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { controlOptions, wordsState, scoreState } from \"./Atom\";\nimport { SPEED_STEP, SPAWN_INTERVAL } from \"./Constants\";\nimport { createWord, removeWord } from \"./Utils\";\nimport { Word } from \"./Word\";\nimport { Control } from \"./Control\";\nimport { UserInput } from \"./UserInput\";\nimport { Score } from \"./Score\";\nexport const Animation = () => {\n  _s();\n\n  // <h1>Animation is working.</h1>\n  // const wordsArr = [{ text: \"test\", x: 100, y: 100 }, { text: \"hello\", x: 200, y: 300 }];\n  const [words, updateWords] = useRecoilState(wordsState);\n  const [controlState, setControlState] = useRecoilState(controlOptions);\n  const [input, setInput] = useState(\"\");\n  const [word, setWord] = useState(\"\");\n  const [count, setCount] = useState(false); // const [score, setScore] = useRecoilState(scoreState);\n\n  const requestRef = useRef();\n  const intervalRef = useRef();\n  const fieldRef = useRef(); // console.log(\"WORDS BACK IN ANIMATION---->\", createWord());\n\n  const advanceStep = useCallback(() => {\n    updateWords(oldWords => {\n      const newWords = [];\n\n      for (let word of oldWords) {\n        const newY = word.y + SPEED_STEP * controlState.speed / 60;\n\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\n          newWords.push({ ...word,\n            y: newY\n          }); // console.log(\"NEW WORDSSSSSS---->\", newWords);\n        }\n      }\n\n      return newWords;\n    });\n    requestRef.current = requestAnimationFrame(advanceStep);\n  }, [controlState.speed, updateWords]);\n  const spawnWord = useCallback(() => {\n    updateWords(oldWords => [...oldWords, createWord()]);\n  }, [updateWords]);\n  useEffect(() => {\n    const stop = () => {\n      intervalRef.current && clearInterval(intervalRef.current);\n      requestRef.current && cancelAnimationFrame(requestRef.current);\n    };\n\n    if (controlState.isRunning) {\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\n      requestRef.current = requestAnimationFrame(advanceStep);\n    } else {\n      stop();\n    }\n\n    return () => stop();\n  }, [controlState.isRunning, advanceStep, spawnWord]);\n  const clear = useCallback(() => {\n    setControlState({ ...controlState,\n      isRunning: false,\n      speed: 5\n    });\n    updateWords([]); // setScore(0);\n  }, [setControlState, updateWords, controlState]); // }, [setControlState, setScore, updateDots, controlState]);\n  // console.log(\"OLD WORDS -------->\", updateWords);\n\n  const onWordClick = index => {// setScore(score + calculatePoints(dots[index]));\n    //updateWords(removeWord(words, index));\n  };\n\n  const onKeyPress = e => {\n    if (e.which === 13) {\n      if (input.toLowerCase() === word.toLowerCase()) {\n        setCount(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Score, {\n      change: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      children: /*#__PURE__*/_jsxDEV(Control, {\n        onClear: clear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      ref: fieldRef,\n      children: words.map((word, index) => {\n        const x = (fieldRef.current.offsetWidth - word.size) * word.x / 100;\n        set;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Word, { ...word,\n              x: x,\n              index: index,\n              onClick: onWordClick\n            }, word.text, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type the words\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: onKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this) // wordsArr.map((word, => (\n  //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\n  // ))\n  // {/* <Word\n  //     // word=\"TEST\"\n  //     color=\"red\"\n  //     x=\"100\" y=\"200\"\n  //     // onClick={() => {}}\n  //     size=\"40\"\n  // />\n  // <Word\n  //     // word=\"test2\"\n  //     color=\"green\"\n  //     x=\"200\" y=\"300\"\n  //     // onClick={() => {}}\n  //     size=\"35\" /> */}\n  // {/* </div> */}\n  // </div>\n  ;\n};\n\n_s(Animation, \"vq5s9Pr0j9sBkdU88lCvB7IDkWg=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = Animation;\nexport default Animation; // const =[{text1: xxx}, {...}...]\n//\n\nvar _c;\n\n$RefreshReg$(_c, \"Animation\");","map":{"version":3,"sources":["C:/Users/Owner/Documents/GitHub/Googly-Word-Game/googly/src/Animation.js"],"names":["React","useCallback","useState","useEffect","useRef","useRecoilState","controlOptions","wordsState","scoreState","SPEED_STEP","SPAWN_INTERVAL","createWord","removeWord","Word","Control","UserInput","Score","Animation","words","updateWords","controlState","setControlState","input","setInput","word","setWord","count","setCount","requestRef","intervalRef","fieldRef","advanceStep","oldWords","newWords","newY","y","speed","current","offsetHeight","size","push","requestAnimationFrame","spawnWord","stop","clearInterval","cancelAnimationFrame","isRunning","setInterval","clear","onWordClick","index","onKeyPress","e","which","toLowerCase","map","x","offsetWidth","set","text","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { controlOptions, wordsState, scoreState } from \"./Atom\";\r\nimport { SPEED_STEP, SPAWN_INTERVAL } from \"./Constants\";\r\nimport { createWord, removeWord } from \"./Utils\";\r\n\r\nimport { Word } from \"./Word\";\r\nimport { Control } from \"./Control\";\r\nimport { UserInput } from \"./UserInput\";\r\nimport { Score } from \"./Score\";\r\n\r\nexport const Animation = () => {\r\n  // <h1>Animation is working.</h1>\r\n  // const wordsArr = [{ text: \"test\", x: 100, y: 100 }, { text: \"hello\", x: 200, y: 300 }];\r\n  const [words, updateWords] = useRecoilState(wordsState);\r\n  const [controlState, setControlState] = useRecoilState(controlOptions);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [word, setWord] = useState(\"\");\r\n  const [count, setCount] = useState(false);\r\n  // const [score, setScore] = useRecoilState(scoreState);\r\n\r\n  const requestRef = useRef();\r\n  const intervalRef = useRef();\r\n  const fieldRef = useRef();\r\n\r\n  // console.log(\"WORDS BACK IN ANIMATION---->\", createWord());\r\n\r\n  const advanceStep = useCallback(() => {\r\n    updateWords((oldWords) => {\r\n      const newWords = [];\r\n      for (let word of oldWords) {\r\n        const newY = word.y + (SPEED_STEP * controlState.speed) / 60;\r\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\r\n          newWords.push({\r\n            ...word,\r\n            y: newY,\r\n          });\r\n          // console.log(\"NEW WORDSSSSSS---->\", newWords);\r\n        }\r\n      }\r\n      return newWords;\r\n    });\r\n    requestRef.current = requestAnimationFrame(advanceStep);\r\n  }, [controlState.speed, updateWords]);\r\n\r\n  const spawnWord = useCallback(() => {\r\n    updateWords((oldWords) => [...oldWords, createWord()]);\r\n  }, [updateWords]);\r\n\r\n  useEffect(() => {\r\n    const stop = () => {\r\n      intervalRef.current && clearInterval(intervalRef.current);\r\n      requestRef.current && cancelAnimationFrame(requestRef.current);\r\n    };\r\n\r\n    if (controlState.isRunning) {\r\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\r\n      requestRef.current = requestAnimationFrame(advanceStep);\r\n    } else {\r\n      stop();\r\n    }\r\n    return () => stop();\r\n  }, [controlState.isRunning, advanceStep, spawnWord]);\r\n\r\n  const clear = useCallback(() => {\r\n    setControlState({ ...controlState, isRunning: false, speed: 5 });\r\n    updateWords([]);\r\n    // setScore(0);\r\n  }, [setControlState, updateWords, controlState]);\r\n  // }, [setControlState, setScore, updateDots, controlState]);\r\n\r\n  // console.log(\"OLD WORDS -------->\", updateWords);\r\n\r\n  const onWordClick = (index) => {\r\n    // setScore(score + calculatePoints(dots[index]));\r\n    //updateWords(removeWord(words, index));\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    if (e.which === 13) {\r\n      if (input.toLowerCase() === word.toLowerCase()) {\r\n        setCount(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Score change={count} />\r\n      <div className=\"panel\">\r\n        <Control onClear={clear} />\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"field\" ref={fieldRef}>\r\n        {words.map((word, index) => {\r\n          const x = ((fieldRef.current.offsetWidth - word.size) * word.x) / 100;\r\n          set;\r\n          return (\r\n            <>\r\n              <div>\r\n                <Word\r\n                  key={word.text}\r\n                  {...word}\r\n                  x={x}\r\n                  index={index}\r\n                  onClick={onWordClick}\r\n                />\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type the words\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={onKeyPress}\r\n        />\r\n      </div>\r\n    </div>\r\n    // wordsArr.map((word, => (\r\n    //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\r\n    // ))\r\n\r\n    // {/* <Word\r\n    //     // word=\"TEST\"\r\n    //     color=\"red\"\r\n    //     x=\"100\" y=\"200\"\r\n    //     // onClick={() => {}}\r\n    //     size=\"40\"\r\n    // />\r\n    // <Word\r\n    //     // word=\"test2\"\r\n    //     color=\"green\"\r\n    //     x=\"200\" y=\"300\"\r\n    //     // onClick={() => {}}\r\n    //     size=\"35\" /> */}\r\n    // {/* </div> */}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default Animation;\r\n// const =[{text1: xxx}, {...}...]\r\n//\r\n"]},"metadata":{},"sourceType":"module"}