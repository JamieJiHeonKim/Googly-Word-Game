{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\GitHub\\\\Googly-Word-Game\\\\googly\\\\src\\\\Score.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactStoreIndicator from \"react-score-indicator\";\nimport { Button, ScoreFont } from \"./Style\";\nimport { ConfettiAnimation } from \"./Confetti\";\nexport const Score = () => {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const [animate, setAnimate] = useState(true);\n  const [recycle, setRecycle] = useState(0);\n  useEffect(() => {\n    if (count === 10) {\n      setAnimate(true);\n      setRecycle(200);\n    } else {\n      setAnimate(true);\n      setRecycle(0);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ConfettiAnimation, {\n      run: animate,\n      numberOfPieces: recycle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreFont, {\n      children: \"Score\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactStoreIndicator, {\n      value: count,\n      maxValue: 100,\n      lineWidth: 15,\n      lineGap: 3,\n      fadedOpacity: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      buttonColor: \"green\",\n      onClick: () => setCount(count + 1),\n      children: \"Click Bait\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Score, \"ABrBoi0xwmYMLrH5MgpRKHL2n2c=\");\n\n_c = Score;\n\nvar _c;\n\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"sources":["C:/Users/Owner/Documents/GitHub/Googly-Word-Game/googly/src/Score.js"],"names":["React","useState","useEffect","ReactStoreIndicator","Button","ScoreFont","ConfettiAnimation","Score","count","setCount","animate","setAnimate","recycle","setRecycle"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,SAAlC;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,KAAK,KAAK,EAAd,EAAkB;AAChBG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,UAAU,CAAC,GAAD,CAAV;AACD,KAHD,MAGO;AACLF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,UAAU,CAAC,CAAD,CAAV;AACD;AACF,GARQ,CAAT;AASA,sBACE;AAAA,4BACE,QAAC,iBAAD;AAAmB,MAAA,GAAG,EAAEH,OAAxB;AAAiC,MAAA,cAAc,EAAEE;AAAjD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,mBAAD;AACE,MAAA,KAAK,EAAEJ,KADT;AAEE,MAAA,QAAQ,EAAE,GAFZ;AAGE,MAAA,SAAS,EAAE,EAHb;AAIE,MAAA,OAAO,EAAE,CAJX;AAKE,MAAA,YAAY,EAAE;AALhB;AAAA;AAAA;AAAA;AAAA,YAHF,eAUE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAC,OAApB;AAA4B,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAgBD,CA7BM;;GAAMD,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactStoreIndicator from \"react-score-indicator\";\r\nimport { Button, ScoreFont } from \"./Style\";\r\nimport { ConfettiAnimation } from \"./Confetti\";\r\n\r\nexport const Score = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [animate, setAnimate] = useState(true);\r\n  const [recycle, setRecycle] = useState(0);\r\n  useEffect(() => {\r\n    if (count === 10) {\r\n      setAnimate(true);\r\n      setRecycle(200);\r\n    } else {\r\n      setAnimate(true);\r\n      setRecycle(0);\r\n    }\r\n  });\r\n  return (\r\n    <>\r\n      <ConfettiAnimation run={animate} numberOfPieces={recycle} />\r\n      <ScoreFont>Score</ScoreFont>\r\n      <ReactStoreIndicator\r\n        value={count}\r\n        maxValue={100}\r\n        lineWidth={15}\r\n        lineGap={3}\r\n        fadedOpacity={20}\r\n      />\r\n      <Button buttonColor=\"green\" onClick={() => setCount(count + 1)}>\r\n        Click Bait\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}