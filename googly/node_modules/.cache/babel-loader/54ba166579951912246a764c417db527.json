{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/wendy/Desktop/School/CMPUT-401/Googly-Word-Game/googly/src/Animation.js\",\n    _s = $RefreshSig$();\n\nimport { Button, DangerButton } from \"./Style\";\nimport React, { useState } from \"react\";\nimport { atom } from \"recoil\";\nimport { Word } from \"./Word\";\nimport { MAX_POINTS, COLORS, SIZES } from './constants'; // const WORDS = ['test', 'test1', 'test2'];\n\nexport const Animation = () => {\n  _s();\n\n  /*#__PURE__*/\n  _jsxDEV(\"h1\", {\n    children: \"Animation is working.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n\n  const [words, updateWords] = useRecoilState(wordsState);\n  const requestRef = useRef();\n  const intervalRef = useRef();\n  const fieldRef = useRef();\n  const wordsArr = [{\n    text: \"test\",\n    x: 100,\n    y: 100\n  }, {\n    text: \"hello\",\n    x: 200,\n    y: 300\n  }];\n  const spawnDot = useCallback(() => {\n    updateWords(oldWords => [...oldWords, createWord()]);\n  }, [updateWords]);\n  const clear = useCallback(() => {\n    setControlState({ ...controlState,\n      isRunning: false,\n      speed: 5\n    });\n    updateWords([]); // setScore(0);\n  }, [setControlState, updateWords, controlState]); // }, [setControlState, setScore, updateDots, controlState]);\n\n  const onWordClick = index => {\n    // setScore(score + calculatePoints(dots[index]));\n    updateWords(removeWord(words, index));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      children: /*#__PURE__*/_jsxDEV(Control, {\n        onClear: clear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      ref: fieldRef,\n      children: words.map((word, index) => {\n        const x = (fieldRef.current.offsetWidth - word.size) * word.x / 100;\n        return /*#__PURE__*/_jsxDEV(Word, { ...word,\n          x: x,\n          index: index,\n          onClick: onWordClick\n        }, `word-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this) // wordsArr.map((word, => (\n  //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\n  // ))\n  // {/* <Word\n  //     // word=\"TEST\"\n  //     color=\"red\" \n  //     x=\"100\" y=\"200\" \n  //     // onClick={() => {}} \n  //     size=\"40\" \n  // />\n  // <Word\n  //     // word=\"test2\"\n  //     color=\"green\" \n  //     x=\"200\" y=\"300\" \n  //     // onClick={() => {}} \n  //     size=\"35\" /> */}\n  // {/* </div> */}\n  // </div>\n  ;\n};\n\n_s(Animation, \"pUvhUtVwBOnijveKxerQaGITYsw=\", true);\n\n_c = Animation;\nexport default Animation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Animation\");","map":{"version":3,"sources":["/Users/wendy/Desktop/School/CMPUT-401/Googly-Word-Game/googly/src/Animation.js"],"names":["Button","DangerButton","React","useState","atom","Word","MAX_POINTS","COLORS","SIZES","Animation","words","updateWords","useRecoilState","wordsState","requestRef","useRef","intervalRef","fieldRef","wordsArr","text","x","y","spawnDot","useCallback","oldWords","createWord","clear","setControlState","controlState","isRunning","speed","onWordClick","index","removeWord","map","word","current","offsetWidth","size"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,YAAjB,QAAqC,SAArC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,KAA7B,QAA0C,aAA1C,C,CAEA;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBC,cAAc,CAACC,UAAD,CAA3C;AACA,QAAMC,UAAU,GAAGC,MAAM,EAAzB;AACA,QAAMC,WAAW,GAAGD,MAAM,EAA1B;AACA,QAAME,QAAQ,GAAGF,MAAM,EAAvB;AAEA,QAAMG,QAAQ,GAAG,CAAC;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,CAAC,EAAE,GAAnB;AAAwBC,IAAAA,CAAC,EAAE;AAA3B,GAAD,EAAmC;AAAEF,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,CAAC,EAAE,GAApB;AAAyBC,IAAAA,CAAC,EAAE;AAA5B,GAAnC,CAAjB;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BZ,IAAAA,WAAW,CAAEa,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcC,UAAU,EAAxB,CAAf,CAAX;AACH,GAF2B,EAEzB,CAACd,WAAD,CAFyB,CAA5B;AAOA,QAAMe,KAAK,GAAGH,WAAW,CAAC,MAAM;AAC5BI,IAAAA,eAAe,CAAC,EAAC,GAAGC,YAAJ;AAAkBC,MAAAA,SAAS,EAAE,KAA7B;AAAoCC,MAAAA,KAAK,EAAE;AAA3C,KAAD,CAAf;AACAnB,IAAAA,WAAW,CAAC,EAAD,CAAX,CAF4B,CAG5B;AACH,GAJwB,EAItB,CAACgB,eAAD,EAAkBhB,WAAlB,EAA+BiB,YAA/B,CAJsB,CAAzB,CAf2B,CAoB3B;;AAEA,QAAMG,WAAW,GAAIC,KAAD,IAAW;AAC3B;AACArB,IAAAA,WAAW,CAACsB,UAAU,CAACvB,KAAD,EAAQsB,KAAR,CAAX,CAAX;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEN;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,GAAG,EAAET,QAA5B;AAAA,gBACKP,KAAK,CAACwB,GAAN,CAAU,CAACC,IAAD,EAAOH,KAAP,KAAiB;AACxB,cAAMZ,CAAC,GAAG,CAACH,QAAQ,CAACmB,OAAT,CAAiBC,WAAjB,GAA+BF,IAAI,CAACG,IAArC,IAA6CH,IAAI,CAACf,CAAlD,GAAsD,GAAhE;AACA,4BAAO,QAAC,IAAD,OAECe,IAFD;AAGH,UAAA,CAAC,EAAEf,CAHA;AAIH,UAAA,KAAK,EAAEY,KAJJ;AAKH,UAAA,OAAO,EAAED;AALN,WACG,QAAOC,KAAM,EADhB;AAAA;AAAA;AAAA;AAAA,gBAAP;AAOH,OATA;AADL;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAmBgB;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACJ;AAtCJ;AAyCH,CApEM;;GAAMvB,S;;KAAAA,S;AAyEb,eAAeA,SAAf","sourcesContent":["import { Button, DangerButton } from \"./Style\";\nimport React, { useState } from \"react\";\nimport { atom } from \"recoil\";\nimport { Word } from \"./Word\";\nimport { MAX_POINTS, COLORS, SIZES } from './constants'; \n\n// const WORDS = ['test', 'test1', 'test2'];\n\nexport const Animation = () => {\n    <h1>Animation is working.</h1>\n    const [words, updateWords] = useRecoilState(wordsState);\n    const requestRef = useRef();\n    const intervalRef = useRef();\n    const fieldRef = useRef();\n\n    const wordsArr = [{ text: \"test\", x: 100, y: 100 }, { text: \"hello\", x: 200, y: 300 }];\n    const spawnDot = useCallback(() => {\n        updateWords((oldWords) => [...oldWords, createWord()]);\n    }, [updateWords]);\n\n    \n\n\n    const clear = useCallback(() => {\n        setControlState({...controlState, isRunning: false, speed: 5});\n        updateWords([]);\n        // setScore(0);\n    }, [setControlState, updateWords, controlState]);\n    // }, [setControlState, setScore, updateDots, controlState]);\n\n    const onWordClick = (index) => {\n        // setScore(score + calculatePoints(dots[index]));\n        updateWords(removeWord(words, index));\n    };\n\n    return (\n        <div className=\"main\">\n            <div className=\"panel\">\n                <Control onClear={clear} />\n                {/*<Score />*/}\n            </div>\n            <div className=\"field\" ref={fieldRef}>\n                {words.map((word, index) => {\n                    const x = (fieldRef.current.offsetWidth - word.size) * word.x / 100\n                    return <Word\n                        key={`word-${index}`} \n                        {...word}\n                        x={x}\n                        index={index} \n                        onClick={onWordClick} \n                    />;\n                })}\n            </div>\n        </div>\n                    // wordsArr.map((word, => (\n                    //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\n                    // ))\n\n                \n                // {/* <Word\n                //     // word=\"TEST\"\n                //     color=\"red\" \n                //     x=\"100\" y=\"200\" \n                //     // onClick={() => {}} \n                //     size=\"40\" \n                // />\n                // <Word\n                //     // word=\"test2\"\n                //     color=\"green\" \n                //     x=\"200\" y=\"300\" \n                //     // onClick={() => {}} \n                //     size=\"35\" /> */}\n            // {/* </div> */}\n        // </div>\n\n    );\n}\n\n\n\n\nexport default Animation;"]},"metadata":{},"sourceType":"module"}