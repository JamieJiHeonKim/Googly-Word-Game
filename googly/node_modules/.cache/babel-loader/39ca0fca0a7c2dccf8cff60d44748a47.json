{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Jon\\\\Documents\\\\GitHub\\\\Googly-Word-Game\\\\googly\\\\src\\\\Animation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { controlOptions, wordsState, scoreState } from \"./Atom\";\nimport { SPEED_STEP, SPAWN_INTERVAL } from \"./Constants\";\nimport { createWord, removeWord } from \"./Utils\";\nimport { Word } from \"./Word\";\nimport { Control } from \"./Control\";\nimport { Score } from \"./Score\";\nexport const Animation = () => {\n  _s();\n\n  const [words, updateWords] = useRecoilState(wordsState);\n  const [controlState, setControlState] = useRecoilState(controlOptions);\n  const [input, setInput] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const requestRef = useRef();\n  const intervalRef = useRef();\n  const fieldRef = useRef();\n  const advanceStep = useCallback(() => {\n    updateWords(oldWords => {\n      const newWords = [];\n\n      for (let word of oldWords) {\n        const newY = word.y + SPEED_STEP * controlState.speed / 60;\n\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\n          newWords.push({ ...word,\n            y: newY\n          });\n        }\n      }\n\n      return newWords;\n    });\n    requestRef.current = requestAnimationFrame(advanceStep);\n  }, [controlState.speed, updateWords]);\n  const spawnWord = useCallback(() => {\n    updateWords(oldWords => [...oldWords, createWord()]);\n  }, [updateWords]);\n  useEffect(() => {\n    const stop = () => {\n      intervalRef.current && clearInterval(intervalRef.current);\n      requestRef.current && cancelAnimationFrame(requestRef.current);\n    };\n\n    if (controlState.isRunning) {\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\n      requestRef.current = requestAnimationFrame(advanceStep);\n    } else {\n      stop();\n    }\n\n    return () => stop();\n  }, [controlState.isRunning, advanceStep, spawnWord]);\n  const clear = useCallback(() => {\n    setControlState({ ...controlState,\n      isRunning: false,\n      speed: 5\n    });\n    updateWords([]);\n  }, [setControlState, updateWords, controlState]);\n\n  const onWordClick = index => {\n    updateWords(removeWord(words, index));\n    setCount(count + 1);\n  };\n\n  const onKeyPress = e => {\n    if (e.which === 13) {\n      setInput(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Score, {\n        change: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      children: /*#__PURE__*/_jsxDEV(Control, {\n        onClear: clear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      ref: fieldRef,\n      children: words.map((word, index) => {\n        const x = (fieldRef.current.offsetWidth - word.size) * word.x / 100;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Word, { ...word,\n              x: x,\n              index: index,\n              onClick: onWordClick,\n              youTyped: input\n            }, word.text, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"clean-textbox\",\n        type: \"text\",\n        placeholder: \"Type the words\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: onKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Animation, \"tuCF6+exRmCbOgrjF+0hWIDmu8A=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = Animation;\nexport default Animation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Animation\");","map":{"version":3,"sources":["C:/Users/Jon/Documents/GitHub/Googly-Word-Game/googly/src/Animation.js"],"names":["React","useCallback","useState","useEffect","useRef","useRecoilState","controlOptions","wordsState","scoreState","SPEED_STEP","SPAWN_INTERVAL","createWord","removeWord","Word","Control","Score","Animation","words","updateWords","controlState","setControlState","input","setInput","count","setCount","requestRef","intervalRef","fieldRef","advanceStep","oldWords","newWords","word","newY","y","speed","current","offsetHeight","size","push","requestAnimationFrame","spawnWord","stop","clearInterval","cancelAnimationFrame","isRunning","setInterval","clear","onWordClick","index","onKeyPress","e","which","map","x","offsetWidth","text","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { controlOptions, wordsState, scoreState } from \"./Atom\";\r\nimport { SPEED_STEP, SPAWN_INTERVAL } from \"./Constants\";\r\nimport { createWord, removeWord } from \"./Utils\";\r\n\r\nimport { Word } from \"./Word\";\r\nimport { Control } from \"./Control\";\r\nimport { Score } from \"./Score\";\r\n\r\nexport const Animation = () => {\r\n  const [words, updateWords] = useRecoilState(wordsState);\r\n  const [controlState, setControlState] = useRecoilState(controlOptions);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n\r\n  const requestRef = useRef();\r\n  const intervalRef = useRef();\r\n  const fieldRef = useRef();\r\n\r\n  const advanceStep = useCallback(() => {\r\n    updateWords((oldWords) => {\r\n      const newWords = [];\r\n      for (let word of oldWords) {\r\n        const newY = word.y + (SPEED_STEP * controlState.speed) / 60;\r\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\r\n          newWords.push({\r\n            ...word,\r\n            y: newY,\r\n          });\r\n        }\r\n      }\r\n      return newWords;\r\n    });\r\n    requestRef.current = requestAnimationFrame(advanceStep);\r\n  }, [controlState.speed, updateWords]);\r\n\r\n  const spawnWord = useCallback(() => {\r\n    updateWords((oldWords) => [...oldWords, createWord()]);\r\n  }, [updateWords]);\r\n\r\n  useEffect(() => {\r\n    const stop = () => {\r\n      intervalRef.current && clearInterval(intervalRef.current);\r\n      requestRef.current && cancelAnimationFrame(requestRef.current);\r\n    };\r\n\r\n    if (controlState.isRunning) {\r\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\r\n      requestRef.current = requestAnimationFrame(advanceStep);\r\n    } else {\r\n      stop();\r\n    }\r\n    return () => stop();\r\n  }, [controlState.isRunning, advanceStep, spawnWord]);\r\n\r\n  const clear = useCallback(() => {\r\n    setControlState({ ...controlState, isRunning: false, speed: 5 });\r\n    updateWords([]);\r\n  }, [setControlState, updateWords, controlState]);\r\n\r\n\r\n  const onWordClick = (index) => {\r\n    updateWords(removeWord(words, index));\r\n    setCount(count + 1);\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    if (e.which === 13) {\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div>\r\n        <Score change={count} />\r\n      </div>\r\n      <div className=\"panel\">\r\n        <Control onClear={clear} />\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"field\" ref={fieldRef}>\r\n        {words.map((word, index) => {\r\n          const x = ((fieldRef.current.offsetWidth - word.size) * word.x) / 100;\r\n          return (\r\n            <>\r\n              <div>\r\n                <Word\r\n                  key={word.text}\r\n                  {...word}\r\n                  x={x}\r\n                  index={index}\r\n                  onClick={onWordClick}\r\n                  youTyped={input}\r\n                />\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <br></br>\r\n\r\n      <div>\r\n        <input\r\n          className=\"clean-textbox\"\r\n          type=\"text\"\r\n          placeholder=\"Type the words\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={onKeyPress}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Animation;"]},"metadata":{},"sourceType":"module"}