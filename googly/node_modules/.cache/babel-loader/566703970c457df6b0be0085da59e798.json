{"ast":null,"code":"import writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\n\nvar useCopyToClipboard = function () {\n  var isMounted = useMountedState();\n\n  var _a = useSetState({\n    value: undefined,\n    error: undefined,\n    noUserInteraction: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var copyToClipboard = useCallback(function (value) {\n    if (!isMounted()) {\n      return;\n    }\n\n    var noUserInteraction;\n    var normalizedValue;\n\n    try {\n      // only strings and numbers casted to strings can be copied to clipboard\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      } // empty strings are also considered invalid\n      else if (value === '') {\n          var error = new Error(\"Cannot copy empty string to clipboard.\");\n          if (process.env.NODE_ENV === 'development') console.error(error);\n          setState({\n            value: value,\n            error: error,\n            noUserInteraction: true\n          });\n          return;\n        }\n\n      normalizedValue = value.toString();\n      noUserInteraction = writeText(normalizedValue);\n      setState({\n        value: normalizedValue,\n        error: undefined,\n        noUserInteraction: noUserInteraction\n      });\n    } catch (error) {\n      setState({\n        value: normalizedValue,\n        error: error,\n        noUserInteraction: noUserInteraction\n      });\n    }\n  }, []);\n  return [state, copyToClipboard];\n};\n\nexport default useCopyToClipboard;","map":{"version":3,"sources":["C:/Users/Owner/Documents/GitHub/Googly-Word-Game/googly/node_modules/react-use/esm/useCopyToClipboard.js"],"names":["writeText","useCallback","useMountedState","useSetState","useCopyToClipboard","isMounted","_a","value","undefined","error","noUserInteraction","state","setState","copyToClipboard","normalizedValue","Error","process","env","NODE_ENV","console","toString"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,IAAIC,kBAAkB,GAAG,YAAY;AACjC,MAAIC,SAAS,GAAGH,eAAe,EAA/B;;AACA,MAAII,EAAE,GAAGH,WAAW,CAAC;AACjBI,IAAAA,KAAK,EAAEC,SADU;AAEjBC,IAAAA,KAAK,EAAED,SAFU;AAGjBE,IAAAA,iBAAiB,EAAE;AAHF,GAAD,CAApB;AAAA,MAIIC,KAAK,GAAGL,EAAE,CAAC,CAAD,CAJd;AAAA,MAImBM,QAAQ,GAAGN,EAAE,CAAC,CAAD,CAJhC;;AAKA,MAAIO,eAAe,GAAGZ,WAAW,CAAC,UAAUM,KAAV,EAAiB;AAC/C,QAAI,CAACF,SAAS,EAAd,EAAkB;AACd;AACH;;AACD,QAAIK,iBAAJ;AACA,QAAII,eAAJ;;AACA,QAAI;AACA;AACA,UAAI,OAAOP,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AACxD,YAAIE,KAAK,GAAG,IAAIM,KAAJ,CAAU,wBAAwB,OAAOR,KAA/B,GAAuC,iCAAjD,CAAZ;AACA,YAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EACIC,OAAO,CAACV,KAAR,CAAcA,KAAd;AACJG,QAAAA,QAAQ,CAAC;AACLL,UAAAA,KAAK,EAAEA,KADF;AAELE,UAAAA,KAAK,EAAEA,KAFF;AAGLC,UAAAA,iBAAiB,EAAE;AAHd,SAAD,CAAR;AAKA;AACH,OAVD,CAWA;AAXA,WAYK,IAAIH,KAAK,KAAK,EAAd,EAAkB;AACnB,cAAIE,KAAK,GAAG,IAAIM,KAAJ,CAAU,wCAAV,CAAZ;AACA,cAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EACIC,OAAO,CAACV,KAAR,CAAcA,KAAd;AACJG,UAAAA,QAAQ,CAAC;AACLL,YAAAA,KAAK,EAAEA,KADF;AAELE,YAAAA,KAAK,EAAEA,KAFF;AAGLC,YAAAA,iBAAiB,EAAE;AAHd,WAAD,CAAR;AAKA;AACH;;AACDI,MAAAA,eAAe,GAAGP,KAAK,CAACa,QAAN,EAAlB;AACAV,MAAAA,iBAAiB,GAAGV,SAAS,CAACc,eAAD,CAA7B;AACAF,MAAAA,QAAQ,CAAC;AACLL,QAAAA,KAAK,EAAEO,eADF;AAELL,QAAAA,KAAK,EAAED,SAFF;AAGLE,QAAAA,iBAAiB,EAAEA;AAHd,OAAD,CAAR;AAKH,KAhCD,CAiCA,OAAOD,KAAP,EAAc;AACVG,MAAAA,QAAQ,CAAC;AACLL,QAAAA,KAAK,EAAEO,eADF;AAELL,QAAAA,KAAK,EAAEA,KAFF;AAGLC,QAAAA,iBAAiB,EAAEA;AAHd,OAAD,CAAR;AAKH;AACJ,GA9CgC,EA8C9B,EA9C8B,CAAjC;AA+CA,SAAO,CAACC,KAAD,EAAQE,eAAR,CAAP;AACH,CAvDD;;AAwDA,eAAeT,kBAAf","sourcesContent":["import writeText from 'copy-to-clipboard';\r\nimport { useCallback } from 'react';\r\nimport useMountedState from './useMountedState';\r\nimport useSetState from './useSetState';\r\nvar useCopyToClipboard = function () {\r\n    var isMounted = useMountedState();\r\n    var _a = useSetState({\r\n        value: undefined,\r\n        error: undefined,\r\n        noUserInteraction: true,\r\n    }), state = _a[0], setState = _a[1];\r\n    var copyToClipboard = useCallback(function (value) {\r\n        if (!isMounted()) {\r\n            return;\r\n        }\r\n        var noUserInteraction;\r\n        var normalizedValue;\r\n        try {\r\n            // only strings and numbers casted to strings can be copied to clipboard\r\n            if (typeof value !== 'string' && typeof value !== 'number') {\r\n                var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\r\n                if (process.env.NODE_ENV === 'development')\r\n                    console.error(error);\r\n                setState({\r\n                    value: value,\r\n                    error: error,\r\n                    noUserInteraction: true,\r\n                });\r\n                return;\r\n            }\r\n            // empty strings are also considered invalid\r\n            else if (value === '') {\r\n                var error = new Error(\"Cannot copy empty string to clipboard.\");\r\n                if (process.env.NODE_ENV === 'development')\r\n                    console.error(error);\r\n                setState({\r\n                    value: value,\r\n                    error: error,\r\n                    noUserInteraction: true,\r\n                });\r\n                return;\r\n            }\r\n            normalizedValue = value.toString();\r\n            noUserInteraction = writeText(normalizedValue);\r\n            setState({\r\n                value: normalizedValue,\r\n                error: undefined,\r\n                noUserInteraction: noUserInteraction,\r\n            });\r\n        }\r\n        catch (error) {\r\n            setState({\r\n                value: normalizedValue,\r\n                error: error,\r\n                noUserInteraction: noUserInteraction,\r\n            });\r\n        }\r\n    }, []);\r\n    return [state, copyToClipboard];\r\n};\r\nexport default useCopyToClipboard;\r\n"]},"metadata":{},"sourceType":"module"}