{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function getClosestBody(el) {\n  if (!el) {\n    return null;\n  } else if (el.tagName === 'BODY') {\n    return el;\n  } else if (el.tagName === 'IFRAME') {\n    var document_1 = el.contentDocument;\n    return document_1 ? document_1.body : null;\n  } else if (!el.offsetParent) {\n    return null;\n  }\n\n  return getClosestBody(el.offsetParent);\n}\n\nfunction preventDefault(rawEvent) {\n  var e = rawEvent || window.event; // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n\n  if (e.touches.length > 1) return true;\n  if (e.preventDefault) e.preventDefault();\n  return false;\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && /iP(ad|hone|od)/.test(window.navigator.platform);\nvar bodies = new Map();\nvar doc = typeof document === 'object' ? document : undefined;\nvar documentListenerAdded = false;\nexport default !doc ? function useLockBodyMock(_locked, _elementRef) {\n  if (_locked === void 0) {\n    _locked = true;\n  }\n} : function useLockBody(locked, elementRef) {\n  if (locked === void 0) {\n    locked = true;\n  }\n\n  var bodyRef = useRef(doc.body);\n  elementRef = elementRef || bodyRef;\n\n  var lock = function (body) {\n    var bodyInfo = bodies.get(body);\n\n    if (!bodyInfo) {\n      bodies.set(body, {\n        counter: 1,\n        initialOverflow: body.style.overflow\n      });\n\n      if (isIosDevice) {\n        if (!documentListenerAdded) {\n          document.addEventListener('touchmove', preventDefault, {\n            passive: false\n          });\n          documentListenerAdded = true;\n        }\n      } else {\n        body.style.overflow = 'hidden';\n      }\n    } else {\n      bodies.set(body, {\n        counter: bodyInfo.counter + 1,\n        initialOverflow: bodyInfo.initialOverflow\n      });\n    }\n  };\n\n  var unlock = function (body) {\n    var bodyInfo = bodies.get(body);\n\n    if (bodyInfo) {\n      if (bodyInfo.counter === 1) {\n        bodies.delete(body);\n\n        if (isIosDevice) {\n          body.ontouchmove = null;\n\n          if (documentListenerAdded) {\n            document.removeEventListener('touchmove', preventDefault);\n            documentListenerAdded = false;\n          }\n        } else {\n          body.style.overflow = bodyInfo.initialOverflow;\n        }\n      } else {\n        bodies.set(body, {\n          counter: bodyInfo.counter - 1,\n          initialOverflow: bodyInfo.initialOverflow\n        });\n      }\n    }\n  };\n\n  useEffect(function () {\n    var body = getClosestBody(elementRef.current);\n\n    if (!body) {\n      return;\n    }\n\n    if (locked) {\n      lock(body);\n    } else {\n      unlock(body);\n    }\n  }, [locked, elementRef.current]); // clean up, on un-mount\n\n  useEffect(function () {\n    var body = getClosestBody(elementRef.current);\n\n    if (!body) {\n      return;\n    }\n\n    return function () {\n      unlock(body);\n    };\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/Owner/Documents/GitHub/Googly-Word-Game/googly/node_modules/react-use/esm/useLockBodyScroll.js"],"names":["useEffect","useRef","getClosestBody","el","tagName","document_1","contentDocument","body","offsetParent","preventDefault","rawEvent","e","window","event","touches","length","isIosDevice","navigator","platform","test","bodies","Map","doc","document","undefined","documentListenerAdded","useLockBodyMock","_locked","_elementRef","useLockBody","locked","elementRef","bodyRef","lock","bodyInfo","get","set","counter","initialOverflow","style","overflow","addEventListener","passive","unlock","delete","ontouchmove","removeEventListener","current"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nexport function getClosestBody(el) {\n    if (!el) {\n        return null;\n    }\n    else if (el.tagName === 'BODY') {\n        return el;\n    }\n    else if (el.tagName === 'IFRAME') {\n        var document_1 = el.contentDocument;\n        return document_1 ? document_1.body : null;\n    }\n    else if (!el.offsetParent) {\n        return null;\n    }\n    return getClosestBody(el.offsetParent);\n}\nfunction preventDefault(rawEvent) {\n    var e = rawEvent || window.event;\n    // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n    if (e.touches.length > 1)\n        return true;\n    if (e.preventDefault)\n        e.preventDefault();\n    return false;\n}\nvar isIosDevice = typeof window !== 'undefined' &&\n    window.navigator &&\n    window.navigator.platform &&\n    /iP(ad|hone|od)/.test(window.navigator.platform);\nvar bodies = new Map();\nvar doc = typeof document === 'object' ? document : undefined;\nvar documentListenerAdded = false;\nexport default !doc\n    ? function useLockBodyMock(_locked, _elementRef) {\n        if (_locked === void 0) { _locked = true; }\n    }\n    : function useLockBody(locked, elementRef) {\n        if (locked === void 0) { locked = true; }\n        var bodyRef = useRef(doc.body);\n        elementRef = elementRef || bodyRef;\n        var lock = function (body) {\n            var bodyInfo = bodies.get(body);\n            if (!bodyInfo) {\n                bodies.set(body, { counter: 1, initialOverflow: body.style.overflow });\n                if (isIosDevice) {\n                    if (!documentListenerAdded) {\n                        document.addEventListener('touchmove', preventDefault, { passive: false });\n                        documentListenerAdded = true;\n                    }\n                }\n                else {\n                    body.style.overflow = 'hidden';\n                }\n            }\n            else {\n                bodies.set(body, { counter: bodyInfo.counter + 1, initialOverflow: bodyInfo.initialOverflow });\n            }\n        };\n        var unlock = function (body) {\n            var bodyInfo = bodies.get(body);\n            if (bodyInfo) {\n                if (bodyInfo.counter === 1) {\n                    bodies.delete(body);\n                    if (isIosDevice) {\n                        body.ontouchmove = null;\n                        if (documentListenerAdded) {\n                            document.removeEventListener('touchmove', preventDefault);\n                            documentListenerAdded = false;\n                        }\n                    }\n                    else {\n                        body.style.overflow = bodyInfo.initialOverflow;\n                    }\n                }\n                else {\n                    bodies.set(body, { counter: bodyInfo.counter - 1, initialOverflow: bodyInfo.initialOverflow });\n                }\n            }\n        };\n        useEffect(function () {\n            var body = getClosestBody(elementRef.current);\n            if (!body) {\n                return;\n            }\n            if (locked) {\n                lock(body);\n            }\n            else {\n                unlock(body);\n            }\n        }, [locked, elementRef.current]);\n        // clean up, on un-mount\n        useEffect(function () {\n            var body = getClosestBody(elementRef.current);\n            if (!body) {\n                return;\n            }\n            return function () {\n                unlock(body);\n            };\n        }, []);\n    };\n"]},"metadata":{},"sourceType":"module"}