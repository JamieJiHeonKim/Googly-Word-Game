[{"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\index.js":"1","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\reportWebVitals.js":"2","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\App.js":"3","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NotFoundPage.js":"4","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NavBar.js":"5","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\GamePage.js":"6","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\HomePage.js":"7","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Confetti.js":"8","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\LoadData.js":"9","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Animation.js":"10","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\PlayGame.js":"11","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Score.js":"12","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Style.js":"13","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Atom.js":"14","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Utils.js":"15","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Constants.js":"16","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Word.js":"17","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\UserInput.js":"18","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Control.js":"19","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\WordList.js":"20"},{"size":517,"mtime":1611452110686,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1611452110687,"results":"23","hashOfConfig":"22"},{"size":760,"mtime":1611452465317,"results":"24","hashOfConfig":"22"},{"size":142,"mtime":1611457994477,"results":"25","hashOfConfig":"22"},{"size":441,"mtime":1611467731052,"results":"26","hashOfConfig":"22"},{"size":517,"mtime":1611493181543,"results":"27","hashOfConfig":"22"},{"size":2965,"mtime":1611492054252,"results":"28","hashOfConfig":"22"},{"size":304,"mtime":1611452465318,"results":"29","hashOfConfig":"22"},{"size":859,"mtime":1611481605216,"results":"30","hashOfConfig":"22"},{"size":3990,"mtime":1611490953272,"results":"31","hashOfConfig":"22"},{"size":1418,"mtime":1611477550675,"results":"32","hashOfConfig":"22"},{"size":820,"mtime":1611477550680,"results":"33","hashOfConfig":"22"},{"size":1139,"mtime":1611477550681,"results":"34","hashOfConfig":"22"},{"size":334,"mtime":1611452465318,"results":"35","hashOfConfig":"22"},{"size":694,"mtime":1611452465329,"results":"36","hashOfConfig":"22"},{"size":321,"mtime":1611490953272,"results":"37","hashOfConfig":"22"},{"size":661,"mtime":1611490953274,"results":"38","hashOfConfig":"22"},{"size":793,"mtime":1611490953274,"results":"39","hashOfConfig":"22"},{"size":2308,"mtime":1611493255352,"results":"40","hashOfConfig":"22"},{"size":255,"mtime":1611481605228,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1dkwlpl",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\index.js",[],["89","90"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\reportWebVitals.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\App.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NotFoundPage.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NavBar.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\GamePage.js",["91","92","93","94","95"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\HomePage.js",["96"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Confetti.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\LoadData.js",["97","98"],"import React, { useState, useEffect } from \"react\";\r\nexport const LoadData = (children) => {\r\n  const [word, setWord] = useState({ word: {} });\r\n  useEffect(() => {\r\n    const fetchWord = async () => {\r\n      const response = await fetch(\r\n        \"https://random-words-with-pronunciation.p.rapidapi.com/word\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-key\":\r\n              \"da94142ddemsh6346e32e7451b8bp19aa62jsn6480d070945c\",\r\n            \"x-rapidapi-host\": \"random-words-with-pronunciation.p.rapidapi.com\",\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      setWord(data.results[0]);\r\n      console.log(word);\r\n    };\r\n    fetchWord();\r\n  }, []);\r\n  return null;\r\n  //   return React.Children.map(children, (child) =>\r\n  //     React.cloneElement(child, { word })\r\n  //   );\r\n};\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Animation.js",["99","100","101"],"import React, { useCallback, useEffect, useRef } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { controlOptions, wordsState, scoreState } from \"./Atom\";\r\nimport { SPEED_STEP, SPAWN_INTERVAL } from \"./Constants\";\r\nimport { createWord, removeWord } from \"./Utils\";\r\n\r\nimport { Word } from \"./Word\";\r\nimport { Control } from \"./Control\";\r\nimport { UserInput } from \"./UserInput\";\r\nimport { Score } from \"./Score\";\r\n\r\nexport const Animation = () => {\r\n  // <h1>Animation is working.</h1>\r\n  // const wordsArr = [{ text: \"test\", x: 100, y: 100 }, { text: \"hello\", x: 200, y: 300 }];\r\n  const [words, updateWords] = useRecoilState(wordsState);\r\n  const [controlState, setControlState] = useRecoilState(controlOptions);\r\n  // const [score, setScore] = useRecoilState(scoreState);\r\n\r\n  const requestRef = useRef();\r\n  const intervalRef = useRef();\r\n  const fieldRef = useRef();\r\n\r\n  // console.log(\"WORDS BACK IN ANIMATION---->\", createWord());\r\n\r\n  const advanceStep = useCallback(() => {\r\n    updateWords((oldWords) => {\r\n      const newWords = [];\r\n      for (let word of oldWords) {\r\n        const newY = word.y + (SPEED_STEP * controlState.speed) / 60;\r\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\r\n          newWords.push({\r\n            ...word,\r\n            y: newY,\r\n          });\r\n          // console.log(\"NEW WORDSSSSSS---->\", newWords);\r\n        }\r\n      }\r\n      return newWords;\r\n    });\r\n    requestRef.current = requestAnimationFrame(advanceStep);\r\n  }, [controlState.speed, updateWords]);\r\n\r\n  const spawnWord = useCallback(() => {\r\n    updateWords((oldWords) => [...oldWords, createWord()]);\r\n  }, [updateWords]);\r\n\r\n  useEffect(() => {\r\n    const stop = () => {\r\n      intervalRef.current && clearInterval(intervalRef.current);\r\n      requestRef.current && cancelAnimationFrame(requestRef.current);\r\n    };\r\n\r\n    if (controlState.isRunning) {\r\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\r\n      requestRef.current = requestAnimationFrame(advanceStep);\r\n    } else {\r\n      stop();\r\n    }\r\n    return () => stop();\r\n  }, [controlState.isRunning, advanceStep, spawnWord]);\r\n\r\n  const clear = useCallback(() => {\r\n    setControlState({ ...controlState, isRunning: false, speed: 5 });\r\n    updateWords([]);\r\n    // setScore(0);\r\n  }, [setControlState, updateWords, controlState]);\r\n  // }, [setControlState, setScore, updateDots, controlState]);\r\n\r\n  // console.log(\"OLD WORDS -------->\", updateWords);\r\n\r\n  const onWordClick = (index) => {\r\n    // setScore(score + calculatePoints(dots[index]));\r\n    //updateWords(removeWord(words, index));\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"panel\">\r\n        <Control onClear={clear} />\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"field\" ref={fieldRef}>\r\n        {words.map((word, index) => {\r\n          const x = ((fieldRef.current.offsetWidth - word.size) * word.x) / 100;\r\n          return (\r\n            <>\r\n              <div>\r\n                <Word\r\n                  key={word.text}\r\n                  {...word}\r\n                  x={x}\r\n                  index={index}\r\n                  onClick={onWordClick}\r\n                />\r\n                <div>\r\n                  <UserInput answer={word} />\r\n                </div>\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n    // wordsArr.map((word, => (\r\n    //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\r\n    // ))\r\n\r\n    // {/* <Word\r\n    //     // word=\"TEST\"\r\n    //     color=\"red\"\r\n    //     x=\"100\" y=\"200\"\r\n    //     // onClick={() => {}}\r\n    //     size=\"40\"\r\n    // />\r\n    // <Word\r\n    //     // word=\"test2\"\r\n    //     color=\"green\"\r\n    //     x=\"200\" y=\"300\"\r\n    //     // onClick={() => {}}\r\n    //     size=\"35\" /> */}\r\n    // {/* </div> */}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default Animation;\r\n// const =[{text1: xxx}, {...}...]\r\n//\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\PlayGame.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Score.js",["102","103"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactStoreIndicator from \"react-score-indicator\";\r\nimport { Button, ScoreFont } from \"./Style\";\r\n\r\nimport { ConfettiAnimation } from \"./Confetti\";\r\n\r\nexport const Score = ({ correct }) => {\r\n  const [count, setCount] = useState(0);\r\n  const [recycle, setRecycle] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (count === 100) {\r\n      setRecycle(true);\r\n    } else {\r\n      setRecycle(false);\r\n    }\r\n    if (correct) {\r\n      setCount(count + 5);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ConfettiAnimation run={true} recycle={recycle} />\r\n\r\n      <ScoreFont>Score</ScoreFont>\r\n      <ReactStoreIndicator\r\n        value={count}\r\n        maxValue={100}\r\n        lineWidth={15}\r\n        lineGap={3}\r\n        fadedOpacity={20}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Style.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Atom.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Utils.js",["104"],"import { MAX_POINTS, COLORS, SIZES, WORDS } from \"./Constants\";\r\n\r\nexport const createWord = () => {\r\n  // pick random color and size\r\n\r\n  const color = COLORS[Math.floor(Math.random() * COLORS.length)];\r\n  const word = WORDS[Math.floor(Math.random() * WORDS.length)];\r\n  const size = SIZES[Math.floor(Math.random() * SIZES.length)];\r\n  console.log(\"words description---------->\", word, color);\r\n  let x = Math.floor(Math.random() * 100);\r\n\r\n  return {\r\n    color,\r\n    word,\r\n    size,\r\n    x,\r\n    y: 0,\r\n  };\r\n};\r\n\r\nexport const removeWord = (words, index) => {\r\n  const newWords = [...words];\r\n  console.log(\"newWords--->\", newWords);\r\n  newWords.splice(index, 1);\r\n  return newWords;\r\n};\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Constants.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Word.js",["105","106","107"],"// import React, { useState, Fragment } from \"react\";\r\nimport React from \"react\";\r\nimport Speech from \"react-speech\";\r\n\r\nexport const Word = (props) => {\r\n  const { color, x, y, size, word, index, onClick } = props;\r\n  // console.log(\"click --->,\", click)\r\n  const wordStyle = {\r\n    backgroundColor: color,\r\n    word: word,\r\n    // height: `${size}px`,\r\n    // width: `${size}px`,\r\n    left: `${props.x}px`,\r\n    top: `${props.y}px`,\r\n  };\r\n\r\n  return (\r\n    <div className=\"word\" style={wordStyle} onClick={() => onClick(index)}>\r\n      {word}\r\n      <Speech text={word} textAsButton={true} displayText=\"♫\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Word;\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\UserInput.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Control.js",["108","109"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\WordList.js",["110"],"import React, { useState } from \"react\";\r\n\r\nexport const WordList = ({ word, children }) => {\r\n  let list_word = [{}];\r\n  list_word.push({ word });\r\n  return React.Children.map(children, (child) =>\r\n    React.cloneElement(child, { list_word })\r\n  );\r\n};\r\n",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"119","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":16},{"ruleId":"115","severity":1,"message":"120","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":15},{"ruleId":"115","severity":1,"message":"121","line":8,"column":10,"nodeType":"117","messageId":"118","endLine":8,"endColumn":18},{"ruleId":"115","severity":1,"message":"122","line":9,"column":8,"nodeType":"117","messageId":"118","endLine":9,"endColumn":14},{"ruleId":"123","severity":1,"message":"124","line":20,"column":7,"nodeType":"125","endLine":20,"endColumn":30},{"ruleId":"115","severity":1,"message":"126","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"127","severity":1,"message":"128","line":22,"column":6,"nodeType":"129","endLine":22,"endColumn":8,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"131","line":4,"column":38,"nodeType":"117","messageId":"118","endLine":4,"endColumn":48},{"ruleId":"115","severity":1,"message":"132","line":6,"column":22,"nodeType":"117","messageId":"118","endLine":6,"endColumn":32},{"ruleId":"115","severity":1,"message":"120","line":11,"column":10,"nodeType":"117","messageId":"118","endLine":11,"endColumn":15},{"ruleId":"115","severity":1,"message":"133","line":3,"column":10,"nodeType":"117","messageId":"118","endLine":3,"endColumn":16},{"ruleId":"127","severity":1,"message":"134","line":11,"column":3,"nodeType":"117","endLine":11,"endColumn":12,"suggestions":"135"},{"ruleId":"115","severity":1,"message":"136","line":1,"column":10,"nodeType":"117","messageId":"118","endLine":1,"endColumn":20},{"ruleId":"115","severity":1,"message":"137","line":6,"column":18,"nodeType":"117","messageId":"118","endLine":6,"endColumn":19},{"ruleId":"115","severity":1,"message":"138","line":6,"column":21,"nodeType":"117","messageId":"118","endLine":6,"endColumn":22},{"ruleId":"115","severity":1,"message":"139","line":6,"column":24,"nodeType":"117","messageId":"118","endLine":6,"endColumn":28},{"ruleId":"115","severity":1,"message":"140","line":1,"column":41,"nodeType":"117","messageId":"118","endLine":1,"endColumn":46},{"ruleId":"115","severity":1,"message":"141","line":1,"column":48,"nodeType":"117","messageId":"118","endLine":1,"endColumn":61},{"ruleId":"115","severity":1,"message":"116","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'PlayGame' is defined but never used.","'Score' is defined but never used.","'LoadData' is defined but never used.","'Speech' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'word'. Either include it or remove the dependency array.","ArrayExpression",["144"],"'scoreState' is defined but never used.","'removeWord' is defined but never used.","'Button' is defined but never used.","React Hook useEffect contains a call to 'setRecycle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [count, correct] as a second argument to the useEffect Hook.",["145"],"'MAX_POINTS' is defined but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'size' is assigned a value but never used.","'props' is defined but never used.","'renderTooltip' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [word]",{"range":"150","text":"151"},"Add dependencies array: [count, correct]",{"range":"152","text":"153"},[721,723],"[word]",[522,522],", [count, correct]"]