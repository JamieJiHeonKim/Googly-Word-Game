[{"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\index.js":"1","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\reportWebVitals.js":"2","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\App.js":"3","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NotFoundPage.js":"4","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NavBar.js":"5","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\HomePage.js":"6","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\GamePage.js":"7","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Animation.js":"8","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\PlayGame.js":"9","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Score.js":"10","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Confetti.js":"11","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Word.js":"12","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Atom.js":"13","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Utils.js":"14","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Constants.js":"15","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\WordList.js":"16","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Control.js":"17","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Style.js":"18","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\LoadData.js":"19","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\UserInput.js":"20"},{"size":517,"mtime":1611452110686,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1611452110687,"results":"23","hashOfConfig":"22"},{"size":760,"mtime":1611452465317,"results":"24","hashOfConfig":"22"},{"size":988,"mtime":1611788464104,"results":"25","hashOfConfig":"22"},{"size":441,"mtime":1611788464104,"results":"26","hashOfConfig":"22"},{"size":2976,"mtime":1611788464093,"results":"27","hashOfConfig":"22"},{"size":517,"mtime":1611788464092,"results":"28","hashOfConfig":"22"},{"size":4759,"mtime":1611788464068,"results":"29","hashOfConfig":"22"},{"size":1418,"mtime":1611788464110,"results":"30","hashOfConfig":"22"},{"size":1085,"mtime":1611788464110,"results":"31","hashOfConfig":"22"},{"size":304,"mtime":1611452465318,"results":"32","hashOfConfig":"22"},{"size":1260,"mtime":1611788464113,"results":"33","hashOfConfig":"22"},{"size":334,"mtime":1611452465318,"results":"34","hashOfConfig":"22"},{"size":694,"mtime":1611452465329,"results":"35","hashOfConfig":"22"},{"size":321,"mtime":1611788464070,"results":"36","hashOfConfig":"22"},{"size":255,"mtime":1611788464118,"results":"37","hashOfConfig":"22"},{"size":2308,"mtime":1611788464087,"results":"38","hashOfConfig":"22"},{"size":1139,"mtime":1611788464111,"results":"39","hashOfConfig":"22"},{"size":859,"mtime":1611788464098,"results":"40","hashOfConfig":"22"},{"size":865,"mtime":1611788464112,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dkwlpl",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\index.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\reportWebVitals.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\App.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NotFoundPage.js",["88"],"import React from \"react\";\r\n\r\nexport const NotFoundPage = () => {\r\n  const style = {\r\n    // backgroundColor: \"black\",\r\n    // color: \"red\",\r\n    // backgroundImage: 'radial-gradient(#11581E, #041607), url(\"https://media.giphy.com/media/oEI9uBYSzLpBK/giphy.gif\")',\r\n  };\r\n  return (\r\n    <div className=\"error-body\">\r\n      {/* <div className=\"errorbody\" style={style}></div> */}\r\n      <div className=\"noise\"></div>\r\n      <div className=\"overlay\"></div>\r\n      <div className=\"terminal\">\r\n        <h1>\r\n          Error <span className=\"errorcode\">404</span>\r\n        </h1>\r\n        <p className=\"output\">\r\n          The page you are looking for might have been removed, had its name\r\n          changed or is temporarily unavailable.\r\n        </p>\r\n        <p className=\"output\">\r\n          Please try to <a href=\"#1\">go back</a> or{\" \"}\r\n          <a href=\"./\">return to the homepage</a>.\r\n        </p>\r\n        <p className=\"output\">Good luck.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",["89","90"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\NavBar.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\HomePage.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\GamePage.js",["91","92","93","94","95"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Animation.js",["96","97"],"import React, { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { controlOptions, wordsState, scoreState } from \"./Atom\";\r\nimport { SPEED_STEP, SPAWN_INTERVAL } from \"./Constants\";\r\nimport { createWord, removeWord } from \"./Utils\";\r\n\r\nimport { Word } from \"./Word\";\r\nimport { Control } from \"./Control\";\r\nimport { UserInput } from \"./UserInput\";\r\nimport { Score } from \"./Score\";\r\n\r\nexport const Animation = () => {\r\n  // <h1>Animation is working.</h1>\r\n  // const wordsArr = [{ text: \"test\", x: 100, y: 100 }, { text: \"hello\", x: 200, y: 300 }];\r\n  const [words, updateWords] = useRecoilState(wordsState);\r\n  const [controlState, setControlState] = useRecoilState(controlOptions);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [currentWord, setCurrentWord] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  // const [score, setScore] = useRecoilState(scoreState);\r\n\r\n  const requestRef = useRef();\r\n  const intervalRef = useRef();\r\n  const fieldRef = useRef();\r\n\r\n  // console.log(\"WORDS BACK IN ANIMATION---->\", createWord());\r\n\r\n  const advanceStep = useCallback(() => {\r\n    updateWords((oldWords) => {\r\n      const newWords = [];\r\n      for (let word of oldWords) {\r\n        const newY = word.y + (SPEED_STEP * controlState.speed) / 60;\r\n        if (newY <= fieldRef.current.offsetHeight - word.size / 2) {\r\n          newWords.push({\r\n            ...word,\r\n            y: newY,\r\n          });\r\n          // console.log(\"NEW WORDSSSSSS---->\", newWords);\r\n        }\r\n      }\r\n      return newWords;\r\n    });\r\n    requestRef.current = requestAnimationFrame(advanceStep);\r\n  }, [controlState.speed, updateWords]);\r\n\r\n  const spawnWord = useCallback(() => {\r\n    updateWords((oldWords) => [...oldWords, createWord()]);\r\n  }, [updateWords]);\r\n\r\n  useEffect(() => {\r\n    const stop = () => {\r\n      intervalRef.current && clearInterval(intervalRef.current);\r\n      requestRef.current && cancelAnimationFrame(requestRef.current);\r\n    };\r\n\r\n    if (controlState.isRunning) {\r\n      intervalRef.current = setInterval(spawnWord, SPAWN_INTERVAL);\r\n      requestRef.current = requestAnimationFrame(advanceStep);\r\n    } else {\r\n      stop();\r\n    }\r\n    return () => stop();\r\n  }, [controlState.isRunning, advanceStep, spawnWord]);\r\n\r\n  const clear = useCallback(() => {\r\n    setControlState({ ...controlState, isRunning: false, speed: 5 });\r\n    updateWords([]);\r\n    // setScore(0);\r\n  }, [setControlState, updateWords, controlState]);\r\n  // }, [setControlState, setScore, updateDots, controlState]);\r\n\r\n  // console.log(\"OLD WORDS -------->\", updateWords);\r\n\r\n  const onWordClick = (index) => {\r\n    // setScore(score + calculatePoints(dots[index]));\r\n    updateWords(removeWord(words, index));\r\n    setCount(count + 1);\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    if (e.which === 13) {\r\n      // console.log(input);\r\n      // console.log(currentWord);\r\n      // if (input.toLowerCase() === currentWord.toLowerCase()) {\r\n      //   setCount(true);\r\n      // }\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div>\r\n        <Score change={count} />\r\n      </div>\r\n      <div className=\"panel\">\r\n        <Control onClear={clear} />\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <div className=\"field\" ref={fieldRef}>\r\n        {words.map((word, index) => {\r\n          const x = ((fieldRef.current.offsetWidth - word.size) * word.x) / 100;\r\n          //setCurrentWord(word);\r\n          return (\r\n            <>\r\n              <div>\r\n                <Word\r\n                  key={word.text}\r\n                  {...word}\r\n                  x={x}\r\n                  index={index}\r\n                  onClick={onWordClick}\r\n                  youTyped={input}\r\n                />\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <br></br>\r\n\r\n      <div>\r\n        <input\r\n          className=\"clean-textbox\"\r\n          type=\"text\"\r\n          placeholder=\"Type the words\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={onKeyPress}\r\n        />\r\n      </div>\r\n    </div>\r\n    // wordsArr.map((word, => (\r\n    //     <Word text={word.text} key={word.text} x={word.x} y={word.y} size=\"40\" />\r\n    // ))\r\n\r\n    // {/* <Word\r\n    //     // word=\"TEST\"\r\n    //     color=\"red\"\r\n    //     x=\"100\" y=\"200\"\r\n    //     // onClick={() => {}}\r\n    //     size=\"40\"\r\n    // />\r\n    // <Word\r\n    //     // word=\"test2\"\r\n    //     color=\"green\"\r\n    //     x=\"200\" y=\"300\"\r\n    //     // onClick={() => {}}\r\n    //     size=\"35\" /> */}\r\n    // {/* </div> */}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default Animation;\r\n// const =[{text1: xxx}, {...}...]\r\n//\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\PlayGame.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Score.js",["98"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactStoreIndicator from \"react-score-indicator\";\r\nimport { Button, ScoreFont } from \"./Style\";\r\n\r\nimport { ConfettiAnimation } from \"./Confetti\";\r\n\r\nexport const Score = ({ change }) => {\r\n  const [count, setCount] = useState(0);\r\n  const [recycle, setRecycle] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      (count === 9) |\r\n      (count === 19) |\r\n      (count === 29) |\r\n      (count === 39) |\r\n      (count === 49) |\r\n      (count === 59) |\r\n      (count === 69)\r\n    ) {\r\n      setRecycle(true);\r\n    } else {\r\n      setRecycle(false);\r\n    }\r\n    // if (input.toLowerCase() === correct.toLowerCase()) {\r\n    //   setCount(count + 5);\r\n    // }\r\n    if (change) {\r\n      setCount(change);\r\n    }\r\n  }, [change]);\r\n\r\n  return (\r\n    <>\r\n      <ConfettiAnimation run={true} recycle={recycle} />\r\n\r\n      <ScoreFont>Score</ScoreFont>\r\n      <ReactStoreIndicator\r\n        value={count}\r\n        maxValue={100}\r\n        lineWidth={15}\r\n        lineGap={3}\r\n        fadedOpacity={20}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Confetti.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Word.js",["99","100","101"],"// import React, { useState, Fragment } from \"react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Speech from \"react-speech\";\r\nimport Toast from \"react-bootstrap/Toast\";\r\n\r\nexport const Word = (props) => {\r\n  const { color, x, y, size, word, index, onClick, youTyped } = props;\r\n  const [body, setBody] = useState(\"Please type\");\r\n  // console.log(\"click --->,\", click)\r\n  const wordStyle = {\r\n    backgroundColor: color,\r\n    word: word,\r\n    // height: `${size}px`,\r\n    // width: `${size}px`,\r\n    left: `${props.x}px`,\r\n    top: `${props.y}px`,\r\n  };\r\n  useEffect(() => {\r\n    if (youTyped === word) {\r\n      console.log(youTyped);\r\n      console.log(word);\r\n      setBody(\"Good job, you typed it!!\");\r\n    }\r\n    //setBody(\"Please type\");\r\n  }, [youTyped]);\r\n  return (\r\n    <div className=\"word\" style={wordStyle} onClick={() => onClick(index)}>\r\n      {word}\r\n      <Speech text={word} textAsButton={true} displayText=\"♪\" />\r\n      <Toast>\r\n        <Toast.Header>\r\n          <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\r\n          <strong className=\"mr-auto\">Googly Bot</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>{body}</Toast.Body>\r\n      </Toast>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Word;\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Atom.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Utils.js",["102"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Constants.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\WordList.js",["103","104"],"import React, { useState } from \"react\";\r\n\r\nexport const WordList = ({ word, children }) => {\r\n  let list_word = [{}];\r\n  list_word.push({ word });\r\n  return React.Children.map(children, (child) =>\r\n    React.cloneElement(child, { list_word })\r\n  );\r\n};\r\n","C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Control.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\Style.js",[],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\LoadData.js",["105","106"],"C:\\Users\\Jon\\Documents\\GitHub\\Googly-Word-Game\\googly\\src\\UserInput.js",["107","108"],{"ruleId":"109","severity":1,"message":"110","line":4,"column":9,"nodeType":"111","messageId":"112","endLine":4,"endColumn":14},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"109","severity":1,"message":"117","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"118","line":3,"column":8,"nodeType":"111","messageId":"112","endLine":3,"endColumn":16},{"ruleId":"109","severity":1,"message":"119","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":15},{"ruleId":"109","severity":1,"message":"120","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":18},{"ruleId":"109","severity":1,"message":"121","line":9,"column":8,"nodeType":"111","messageId":"112","endLine":9,"endColumn":14},{"ruleId":"109","severity":1,"message":"122","line":4,"column":38,"nodeType":"111","messageId":"112","endLine":4,"endColumn":48},{"ruleId":"109","severity":1,"message":"123","line":11,"column":7,"nodeType":"111","messageId":"112","endLine":11,"endColumn":12},{"ruleId":"124","severity":1,"message":"125","line":10,"column":3,"nodeType":"111","endLine":10,"endColumn":12,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"127","line":5,"column":18,"nodeType":"111","messageId":"112","endLine":5,"endColumn":19},{"ruleId":"109","severity":1,"message":"128","line":5,"column":21,"nodeType":"111","messageId":"112","endLine":5,"endColumn":22},{"ruleId":"109","severity":1,"message":"129","line":5,"column":24,"nodeType":"111","messageId":"112","endLine":5,"endColumn":28},{"ruleId":"109","severity":1,"message":"130","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":20},{"ruleId":"109","severity":1,"message":"131","line":1,"column":18,"nodeType":"111","messageId":"112","endLine":1,"endColumn":30},{"ruleId":"109","severity":1,"message":"132","line":9,"column":12,"nodeType":"111","messageId":"112","endLine":9,"endColumn":23},{"ruleId":"109","severity":1,"message":"133","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":13},{"ruleId":"124","severity":1,"message":"134","line":22,"column":6,"nodeType":"135","endLine":22,"endColumn":8,"suggestions":"136"},{"ruleId":"109","severity":1,"message":"119","line":2,"column":10,"nodeType":"111","messageId":"112","endLine":2,"endColumn":15},{"ruleId":"109","severity":1,"message":"137","line":6,"column":10,"nodeType":"111","messageId":"112","endLine":6,"endColumn":15},"no-unused-vars","'style' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["138"],"no-negated-in-lhs",["139"],"'useState' is defined but never used.","'PlayGame' is defined but never used.","'Score' is defined but never used.","'LoadData' is defined but never used.","'Speech' is defined but never used.","'scoreState' is defined but never used.","'WORDS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setRecycle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [count] as a second argument to the useEffect Hook.",["140"],"'x' is assigned a value but never used.","'y' is assigned a value but never used.","'size' is assigned a value but never used.","'MAX_POINTS' is defined but never used.","'DangerButton' is defined but never used.","'checkAnswer' is defined but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'word'. Either include it or remove the dependency array.","ArrayExpression",["141"],"'check' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Add dependencies array: [count]",{"range":"146","text":"147"},"Update the dependencies array to be: [word]",{"range":"148","text":"149"},[453,453],", [count]",[721,723],"[word]"]